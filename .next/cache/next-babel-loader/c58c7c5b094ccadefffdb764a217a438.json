{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nconst initMessageList = {\n  messageList: []\n};\nlet sequence = 0;\nexport const messageSlice = createSlice({\n  name: 'messageList',\n  initialState: initMessageList,\n  reducers: {\n    addMessage: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n      messageList: [...state.messageList, _objectSpread(_objectSpread({}, action.payload), {}, {\n        id: sequence++\n      })]\n    }),\n    removeMessage: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n      messageList: state.messageList.filter(message => message.id !== action.payload.id)\n    })\n  }\n});","map":{"version":3,"sources":["/Users/suzukitakuya/workspace/front/next_template/src/modules/states/slices/message.ts"],"names":["createSlice","initMessageList","messageList","sequence","messageSlice","name","initialState","reducers","addMessage","state","action","payload","id","removeMessage","filter","message"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAmBA,MAAMC,eAA6B,GAAG;AACpCC,EAAAA,WAAW,EAAE;AADuB,CAAtC;AAGA,IAAIC,QAAQ,GAAG,CAAf;AACA,OAAO,MAAMC,YAAY,GAAGJ,WAAW,CAAC;AACtCK,EAAAA,IAAI,EAAE,aADgC;AAEtCC,EAAAA,YAAY,EAAEL,eAFwB;AAGtCM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,qCACPD,KADO;AAEVP,MAAAA,WAAW,EAAE,CAAC,GAAGO,KAAK,CAACP,WAAV,kCAA4BQ,MAAM,CAACC,OAAnC;AAA4CC,QAAAA,EAAE,EAAET,QAAQ;AAAxD;AAFH,MADJ;AAKRU,IAAAA,aAAa,EAAE,CAACJ,KAAD,EAAQC,MAAR,qCACVD,KADU;AAEbP,MAAAA,WAAW,EAAEO,KAAK,CAACP,WAAN,CAAkBY,MAAlB,CAA0BC,OAAD,IAAaA,OAAO,CAACH,EAAR,KAAeF,MAAM,CAACC,OAAP,CAAeC,EAApE;AAFA;AALP;AAH4B,CAAD,CAAhC","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport type Message = {\n  id?: number;\n  message: string;\n  type: 'success' | 'error' | 'notice' | 'info';\n  options?: {\n    linkRel?: string;\n    linkTarget?: string;\n    linkTitle?: string;\n    linkUrl?: string;\n    onLinkClick?: () => unknown;\n  };\n};\n\nexport type MessageState = {\n  messageList: Message[];\n};\n\nconst initMessageList: MessageState = {\n  messageList: [],\n};\nlet sequence = 0;\nexport const messageSlice = createSlice({\n  name: 'messageList',\n  initialState: initMessageList,\n  reducers: {\n    addMessage: (state, action: PayloadAction<Message>) => ({\n      ...state,\n      messageList: [...state.messageList, { ...action.payload, id: sequence++ }],\n    }),\n    removeMessage: (state, action: PayloadAction<Message>) => ({\n      ...state,\n      messageList: state.messageList.filter((message) => message.id !== action.payload.id),\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}